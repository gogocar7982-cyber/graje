// DOMÏù¥ Î°úÎìúÎêú ÌõÑ Ïã§Ìñâ
document.addEventListener('DOMContentLoaded', function() {
    
    // Î∂ÄÎìúÎü¨Ïö¥ Ïä§ÌÅ¨Î°§ ÎÑ§ÎπÑÍ≤åÏù¥ÏÖò
    const navLinks = document.querySelectorAll('nav a[href^="#"]');
    
    navLinks.forEach(link => {
        link.addEventListener('click', function(e) {
            e.preventDefault();
            
            const targetId = this.getAttribute('href');
            const targetSection = document.querySelector(targetId);
            
            if (targetSection) {
                const headerHeight = document.querySelector('header').offsetHeight;
                const targetPosition = targetSection.offsetTop - headerHeight;
                
                window.scrollTo({
                    top: targetPosition,
                    behavior: 'smooth'
                });
            }
        });
    });
    
    // Ïä§ÌÅ¨Î°§ Ìï®Ïàò
    window.scrollToSection = function(sectionId) {
        const targetSection = document.querySelector('#' + sectionId);
        if (targetSection) {
            const headerHeight = document.querySelector('header').offsetHeight;
            const targetPosition = targetSection.offsetTop - headerHeight;
            
            window.scrollTo({
                top: targetPosition,
                behavior: 'smooth'
            });
        }
    };
    
    // ÌÉ≠ Ï†ÑÌôò Í∏∞Îä•
    window.showTab = function(tabId) {
        // Î™®Îì† ÌÉ≠ ÎÇ¥Ïö© Ïà®Í∏∞Í∏∞
        const tabContents = document.querySelectorAll('.tab-content');
        tabContents.forEach(content => {
            content.classList.remove('active');
        });
        
        // Î™®Îì† ÌÉ≠ Î≤ÑÌäº ÎπÑÌôúÏÑ±Ìôî
        const tabButtons = document.querySelectorAll('.tab-button');
        tabButtons.forEach(button => {
            button.classList.remove('active');
        });
        
        // ÏÑ†ÌÉùÎêú ÌÉ≠ ÎÇ¥Ïö© Î≥¥Ïù¥Í∏∞
        const selectedTab = document.getElementById(tabId);
        if (selectedTab) {
            selectedTab.classList.add('active');
        }
        
        // ÏÑ†ÌÉùÎêú ÌÉ≠ Î≤ÑÌäº ÌôúÏÑ±Ìôî
        const selectedButton = document.querySelector(`[onclick="showTab('${tabId}')"]`);
        if (selectedButton) {
            selectedButton.classList.add('active');
        }
    };
    
    // Îã§Ïö¥Î°úÎìú Í∏∞Îä•
    window.downloadFile = function() {
        // Ïã§Ï†ú ÌååÏùºÏù¥ ÏóÜÏúºÎØÄÎ°ú ÏïåÎ¶ºÏúºÎ°ú ÎåÄÏ≤¥
        alert('üìã ClipBoard Pro Îã§Ïö¥Î°úÎìú\n\nÌòÑÏû¨ Îç∞Î™® ÌéòÏù¥ÏßÄÏûÖÎãàÎã§.\nÏã§Ï†ú ÌååÏùºÏùÄ Í∞úÎ∞ú ÏôÑÎ£å ÌõÑ Ï†úÍ≥µÎê©ÎãàÎã§.\n\nÎ¨∏Ïùò: support@clipboardpro.com');
        
        // Ïã§Ï†ú Íµ¨ÌòÑ ÏãúÏóêÎäî Îã§ÏùåÍ≥º Í∞ôÏù¥ ÏÇ¨Ïö©:
        // const link = document.createElement('a');
        // link.href = 'path/to/ClipBoard_Pro_v1.0.exe';
        // link.download = 'ClipBoard_Pro_v1.0.exe';
        // link.click();
        
        console.log('Îã§Ïö¥Î°úÎìú Î≤ÑÌäº ÌÅ¥Î¶≠Îê®');
    };
    
    // ÏÜåÏä§ ÏΩîÎìú Î≥¥Í∏∞
    window.viewSource = function() {
        alert('üìù ÏÜåÏä§ ÏΩîÎìú\n\nÏÜåÏä§ ÏΩîÎìúÎäî GitHubÏóêÏÑú ÌôïÏù∏Ìï† Ïàò ÏûàÏäµÎãàÎã§.\n\nüîó https://github.com/your-repo/clipboard-pro');
        console.log('ÏÜåÏä§ ÏΩîÎìú Î≥¥Í∏∞ ÌÅ¥Î¶≠Îê®');
    };
    
    // Ïä§ÌÅ¨Î°§ Ïãú Ìó§Îçî Ïä§ÌÉÄÏùº Î≥ÄÍ≤Ω
    const header = document.querySelector('header');
    
    window.addEventListener('scroll', function() {
        if (window.scrollY > 100) {
            header.style.background = 'rgba(255, 255, 255, 0.98)';
            header.style.backdropFilter = 'blur(15px)';
        } else {
            header.style.background = 'rgba(255, 255, 255, 0.95)';
            header.style.backdropFilter = 'blur(10px)';
        }
    });
    
    // Ïä§ÌÅ¨Î°§ Ïï†ÎãàÎ©îÏù¥ÏÖò
    const observerOptions = {
        threshold: 0.1,
        rootMargin: '0px 0px -50px 0px'
    };
    
    const observer = new IntersectionObserver(function(entries) {
        entries.forEach(entry => {
            if (entry.isIntersecting) {
                entry.target.style.opacity = '1';
                entry.target.style.transform = 'translateY(0)';
                entry.target.classList.add('animated');
            }
        });
    }, observerOptions);
    
    // Ïï†ÎãàÎ©îÏù¥ÏÖò ÎåÄÏÉÅ ÏöîÏÜåÎì§
    const animateElements = document.querySelectorAll('.feature-card, .step, .usage-card, .principle-card');
    
    animateElements.forEach((el, index) => {
        el.style.opacity = '0';
        el.style.transform = 'translateY(50px)';
        el.style.transition = `all 0.8s ease ${index * 0.1}s`;
        observer.observe(el);
    });
    
    // Îç∞Î™® ÏúàÎèÑÏö∞ Ïï†ÎãàÎ©îÏù¥ÏÖò
    function animateDemo() {
        const clipboardItems = document.querySelectorAll('.clipboard-item');
        clipboardItems.forEach((item, index) => {
            item.style.opacity = '0';
            item.style.transform = 'translateX(-20px)';
            
            setTimeout(() => {
                item.style.opacity = '1';
                item.style.transform = 'translateX(0)';
            }, (index + 1) * 800);
        });
    }
    
    // Îç∞Î™® ÏúàÎèÑÏö∞Í∞Ä Î≥¥Ïù¥Î©¥ Ïï†ÎãàÎ©îÏù¥ÏÖò ÏãúÏûë
    const demoObserver = new IntersectionObserver(function(entries) {
        entries.forEach(entry => {
            if (entry.isIntersecting) {
                setTimeout(animateDemo, 1000);
                demoObserver.unobserve(entry.target);
            }
        });
    });
    
    const demoWindow = document.querySelector('.demo-window');
    if (demoWindow) {
        demoObserver.observe(demoWindow);
    }
    
    // ÌÉÄÏù¥Ìïë Ìö®Í≥º
    function typeWriter(element, text, speed = 100) {
        let i = 0;
        element.textContent = '';
        
        function type() {
            if (i < text.length) {
                element.textContent += text.charAt(i);
                i++;
                setTimeout(type, speed);
            }
        }
        
        type();
    }
    
    // ÌÉÄÏù¥Ìïë ÌÖçÏä§Ìä∏ Ïï†ÎãàÎ©îÏù¥ÏÖò
    const typingText = document.querySelector('.typing-text');
    if (typingText) {
        const messages = [
            'ÌÅ¥Î¶ΩÎ≥¥Îìú ÎÇ¥Ïö© ÏûêÎèô Í∞êÏßÄÏ§ë...',
            'ÏÉàÎ°úÏö¥ ÌÖçÏä§Ìä∏Í∞Ä Î≥µÏÇ¨ÎêòÏóàÏäµÎãàÎã§.',
            'ÏûêÎèô Ï≤òÎ¶¨ Í∑úÏπôÏùÑ Ï†ÅÏö©Ï§ë...',
            'ÌûàÏä§ÌÜ†Î¶¨Ïóê Ï†ÄÏû• ÏôÑÎ£å!'
        ];
        
        let messageIndex = 0;
        
        function cycleMessages() {
            typeWriter(typingText, messages[messageIndex], 80);
            messageIndex = (messageIndex + 1) % messages.length;
        }
        
        // Ï≤òÏùå Î©îÏãúÏßÄ ÌëúÏãú
        setTimeout(cycleMessages, 2000);
        
        // 5Ï¥àÎßàÎã§ Î©îÏãúÏßÄ Î≥ÄÍ≤Ω
        setInterval(cycleMessages, 5000);
    }
    
    // ÌÜµÍ≥Ñ Ïπ¥Ïö¥ÌÑ∞ Ïï†ÎãàÎ©îÏù¥ÏÖò
    function animateCounter(element, target, suffix = '', duration = 2000) {
        let start = 0;
        const increment = target / (duration / 16);
        
        function updateCounter() {
            start += increment;
            if (start < target) {
                element.textContent = Math.floor(start) + suffix;
                requestAnimationFrame(updateCounter);
            } else {
                element.textContent = target + suffix;
            }
        }
        
        updateCounter();
    }
    
    // ÌÜµÍ≥Ñ ÏÑπÏÖò Ïï†ÎãàÎ©îÏù¥ÏÖò
    const statsObserver = new IntersectionObserver(function(entries) {
        entries.forEach(entry => {
            if (entry.isIntersecting) {
                const statNumbers = document.querySelectorAll('.stat-number');
                statNumbers.forEach(stat => {
                    const text = stat.textContent;
                    if (text.includes('100')) {
                        animateCounter(stat, 100, '%');
                    } else if (text.includes('50')) {
                        animateCounter(stat, 50, 'KB');
                    }
                    // Win10+Îäî ÌÖçÏä§Ìä∏Ïù¥ÎØÄÎ°ú Ïï†ÎãàÎ©îÏù¥ÏÖò ÏóÜÏùå
                });
                statsObserver.unobserve(entry.target);
            }
        });
    });
    
    const heroStats = document.querySelector('.hero-stats');
    if (heroStats) {
        statsObserver.observe(heroStats);
    }
    
    // ÏΩîÎìú Î∏îÎ°ù Î≥µÏÇ¨ Í∏∞Îä•
    const codeBlocks = document.querySelectorAll('.code-block');
    codeBlocks.forEach(block => {
        block.style.position = 'relative';
        block.style.cursor = 'pointer';
        
        const copyButton = document.createElement('button');
        copyButton.textContent = 'üìã Î≥µÏÇ¨';
        copyButton.style.position = 'absolute';
        copyButton.style.top = '10px';
        copyButton.style.right = '10px';
        copyButton.style.background = 'rgba(79, 172, 254, 0.8)';
        copyButton.style.color = 'white';
        copyButton.style.border = 'none';
        copyButton.style.padding = '5px 10px';
        copyButton.style.borderRadius = '5px';
        copyButton.style.fontSize = '0.8rem';
        copyButton.style.cursor = 'pointer';
        copyButton.style.opacity = '0';
        copyButton.style.transition = 'opacity 0.3s ease';
        
        block.appendChild(copyButton);
        
        block.addEventListener('mouseenter', () => {
            copyButton.style.opacity = '1';
        });
        
        block.addEventListener('mouseleave', () => {
            copyButton.style.opacity = '0';
        });
        
        copyButton.addEventListener('click', (e) => {
            e.stopPropagation();
            const text = block.textContent.replace('üìã Î≥µÏÇ¨', '').trim();
            
            if (navigator.clipboard) {
                navigator.clipboard.writeText(text).then(() => {
                    copyButton.textContent = '‚úÖ Î≥µÏÇ¨Îê®';
                    setTimeout(() => {
                        copyButton.textContent = 'üìã Î≥µÏÇ¨';
                    }, 2000);
                });
            } else {
                // Ìè¥Î∞± Î∞©Î≤ï
                const textArea = document.createElement('textarea');
                textArea.value = text;
                document.body.appendChild(textArea);
                textArea.select();
                document.execCommand('copy');
                document.body.removeChild(textArea);
                
                copyButton.textContent = '‚úÖ Î≥µÏÇ¨Îê®';
                setTimeout(() => {
                    copyButton.textContent = 'üìã Î≥µÏÇ¨';
                }, 2000);
            }
        });
    });
    
    // Î≤ÑÌäº ÌÅ¥Î¶≠ Ìö®Í≥º
    const buttons = document.querySelectorAll('button, .download-button, .demo-button');
    buttons.forEach(button => {
        button.addEventListener('click', function() {
            this.style.transform = 'scale(0.95)';
            setTimeout(() => {
                this.style.transform = '';
            }, 150);
        });
    });
    
    // ÎèôÏ†Å Î∞∞Í≤Ω Ìö®Í≥º
    function createParticles() {
        const hero = document.querySelector('.hero');
        if (!hero) return;
        
        for (let i = 0; i < 8; i++) {
            const particle = document.createElement('div');
            particle.style.position = 'absolute';
            particle.style.width = Math.random() * 6 + 4 + 'px';
            particle.style.height = particle.style.width;
            particle.style.background = 'rgba(79, 172, 254, 0.3)';
            particle.style.borderRadius = '50%';
            particle.style.left = Math.random() * 100 + '%';
            particle.style.top = Math.random() * 100 + '%';
            particle.style.animation = `float ${4 + Math.random() * 4}s ease-in-out infinite`;
            particle.style.animationDelay = Math.random() * 4 + 's';
            particle.style.zIndex = '1';
            hero.appendChild(particle);
        }
    }
    
    createParticles();
    
    // ÌéòÏù¥ÏßÄ Î°úÎìú ÏôÑÎ£å Î°úÍ∑∏
    console.log('üìã ClipBoard Pro ÌéòÏù¥ÏßÄÍ∞Ä Î°úÎìúÎêòÏóàÏäµÎãàÎã§!');
    
    // Í∞úÎ∞úÏûê ÏΩòÏÜî Î©îÏãúÏßÄ
    console.log('%cüìã ClipBoard Pro', 'color: #4facfe; font-size: 20px; font-weight: bold;');
    console.log('%cÌÅ¥Î¶ΩÎ≥¥Îìú ÏûêÎèôÌôîÏùò ÏÉàÎ°úÏö¥ Í≤ΩÌóòÏùÑ ÏãúÏûëÌïòÏÑ∏Ïöî!', 'color: #666; font-size: 14px;');
});
